package main

import "github.com/gaspardle/go-mssqlclrgeo"
import (
	"encoding/hex"
	"fmt"
	_ "log"
)

func main() {
	readUdtGeography()
	wkb2GeoUdt()
}

func readUdtGeography() {
	fmt.Println("ReadGeometry")
	geoudt_array := make([][]byte, 0)

	//LINESTRING (100 100, 20 180, 180 180)
	sample_geo, _ := hex.DecodeString("e610000001040300000000000000000059400000000000005940000000000000344000000000008066400000000000806640000000000080664001000000010000000001000000ffffffff0000000002")
	geoudt_array = append(geoudt_array, sample_geo)

	//mtl
	sample_geo, _ = hex.DecodeString("110F00000104E3000000BFD4D2126E6C5FC126C3F03633B755417A1F3E353C6C5FC1B0A873502FB75541E4630F646D6B5FC15C20763562B7554158C8C1F73A6B5FC145FC5CB581B75541BD7F0F4FDA6A5FC158E7A3E8B9B7554112E04AAC6F6A5FC1066549A20CB85541FF24203F1B6A5FC1BD1254075EB85541B6AF3770A0695FC1D34784B2FDB855412EAC55178E675FC1DB5230D4ADBB554128CD1635BB675FC17B61936D56BC554122AAF7DAAA675FC143F6232733BD5541E40FBAC41A675FC1740EA1D518BE55414B0D9D664B665FC19715B55EFEBE55416E9CE5EF36655FC105D54CA49ABF5541E19E37F108645FC1B6C6576098C05541B0912000A4635FC1BFE1519709C15541E275D2E831635FC12E97B80691C15541701A3B4EC6625FC1ADD4E3AD23C255411880C39475625FC16682AC2E77C255413F934D46D1615FC180B2E7CBE6C255415F6E5F7432615FC15CCBA6AF19C355414A4C0B71D5605FC151CA7124CDC255418ECEC0EE68605FC17459CAC988C2554157CCBECBCD5F5FC14E7067684BC255413208F195515F5FC11C29D8051EC2554150929ADFEA5E5FC13ED69E8720C2554151C9E900275E5FC14590AE1412C255416CDE8805BE5D5FC189497D5D19C25541CE368191AF5D5FC193944026C8C15541C082AAF6865D5FC1965D809993C155419CBEDCC00A5D5FC1B24C22465AC155419410F57DB25C5FC1E277074AAEC05541A100F95F875C5FC1CB663183A9C05541978F8552685C5FC1F3DE1990C8C05541376F23D63F5C5FC10D667B1CFDC05541CE244811E55B5FC1776C7C6F8CC1554149C48659665B5FC1D9F6516CE2C1554192446FD4475A5FC1C6086AEBDFC15541E9E26BB113595FC1B2A4C54385C15541FC381623C7585FC1B2A4C54385C15541709199CCF3575FC1DBD4EB4FC3C15541F564D7EC5A575FC18A95BD1F6CC15541398E3E67E9565FC1FF7107616DC155415A507EC04B565FC1637A444FFEC05541F986CD2427555FC1441CC380C8C055414B5319A8A0535FC1A2641DB5AAC05541077211ADD4525FC14B104BB0DCC05541C6B194D38E525FC11033118D13C1554106AAE0C63F525FC1A29640A494C15541A165FA75AB515FC17B8822AFF1C15541B33EC0BB0B515FC1F5CDE59314C25541F32B391586505FC1D4D6C09D1CC35541FC66B37557505FC1E138AF2C5EC3554155D619BEE84E5FC1F9AD0D9837C455413D42D2B43D4E5FC1B3E17D96D5C455416C254CF5254D5FC1AEC45C2455C555412ECFEE56D34C5FC1959BDD7EDAC55541C000D269084C5FC1FA216F0B5AC655410078C6A1474B5FC161D991DEA6C65541A9572B5BF7495FC161D82749FFC655416ED2341A6F495FC1F3A1053C90C7554151AA0C3D15495FC136999C0F5EC85541D484C8F362485FC1034BA3CE75C955414A74498C6E485FC1EDED44F581CA554186216751AC475FC128379945FCCB55413CECF18646475FC1342631A1A6CC55416B307933B1465FC1EDCA4063A9CD5541D8B041ADE7455FC1C3004B2BD8CE554191B4CD889C455FC1E51A098DE0CF554189FC5FB690455FC1622BAB4C01D0554135D068736F455FC1B506295943D055416658C45F2B455FC1E94DCC0F6FD15541BFDB3CA39F445FC13E281E3A9DD255413CAFB0BFAD435FC1372052DAB1D35541768AF674D9425FC1CD90284B7DD4554183236D5EE9415FC16E52E67E77D55541DAA0ED9F903E5FC1DB5DAEFBD0D75541FCF2D347253D5FC1448032A9C1D8554129550513833B5FC1C7C1083041DA5541C756B71A7B3A5FC18597EBEBE9DA55418E1BA819D9395FC15E6B0AC15ADB5541809C7A1380395FC1EE8610EAE3DB55410A2997B83A395FC1CFE7F7EBC0DC5541BCB730BFC5385FC1D35E0BB5EFDD5541F2050B0D38385FC1601939D4FFDD5541753C3570AA355FC10A35E207BDDE55411AC988AA2A355FC11F1924C7CBDE554122040927F2345FC143AD5BB895DE5541C3B27C1D7F335FC10A35E207BDDE55414D6ABCC755335FC1BD1422FC57DE554111755D4F9E335FC1DC712C650BDE55412257446ADC335FC11D47C58A97DD5541844C77A9FC335FC12E54512BE9DC55414B54EF9DAE345FC19E843D5EC3DB55415E36D6B8EC345FC194487EF99DD955416EFBAA5DB9345FC1F3E57ECA1FD855411C0D6962E2335FC1E75405CDA2D65541D131B34DC9335FC1AC12F1BD87D55541898554A752345FC1A60F89DDF2D355410AA6BDD88F345FC1377B56C06FD3554168A749C60B355FC1F458FC836DD2554122F5B99331365FC1DED03E0885D055413D6B691246365FC1C2FF2309F7CF55412FFB69C569365FC188A5A3AEFFCE55413CA473E251365FC1C90C1343D0CD55411884468612365FC1520A90943CCC5541154CB07649365FC1ECF905B15FCB5541A6AD731A41365FC15760D47593CA55410BB632401F375FC1E04B79BAB5C85541B532BAFCAA375FC1F4E27DFA83C75541A95CC0977A385FC158BC646901C65541067FE6EC63395FC199787FFB57C4554158A016CE3A395FC1671DC02AF2C25541D41CF48718395FC12BC0348659C255415755BBCD11395FC1DA8267363FC25541E4135B8200395FC1949FF45AE3C155419C45187894385FC10E1BF20AB9BF55417925E80D5A385FC1B0576657FBBE5541C039D2B639385FC1571C999D82BE55413C4C6C8D5F385FC1D6D1360C6FBE5541B6376E5E60385FC166430B884EBE5541F6F3953456385FC1DC74B07B4DBE5541AC3F845D4E385FC1D47D379836BE554140FA77787C385FC1419B0D4A00BE55413F259E8B93385FC125F5D121E5BD5541980915F5A2385FC1C46C9F8ED4BD5541B702B375AE385FC170D12774B9BD5541D8C237E0C6385FC131209F3E83BD554112593555E4385FC1440779C14BBD554166F3D6D2EF385FC1596CD88DDDBC554177D15CB2F1385FC1758486C4A8BC554155AAB1BFCB385FC196D328C08CBB554139E9B58675385FC17F66A9B322BA55419E5D737E55385FC1803C216221B95541BC969C734E385FC15B9E6453EBB855412F7FB7E54B385FC1C7E7867FA4B85541DCAB026E43385FC1DF3375F08AB75541F748687E4B385FC1403349ECE8B655419E48112B7A385FC19D374844A8B555416CC73F0D91385FC1EC7E1BF74EB55541229482E3FF385FC14E5B89E853B455414B2996DC7C395FC18976D4E79CB35541097D1080463A5FC11451A573F5B25541300144FBED3A5FC1C1EA70928EB25541FC5D8201A93B5FC1C449206330B25541C6DB608BC73C5FC1A27533BFDBB155413FF0C7649F3D5FC1B9AA4AC3AEB1554158179DDB053F5FC1E0A332067BB1554187DDBCD5FE405FC1924CF17347B155413FD97DD0CF415FC153F30FFB31B15541A4C1F8C2B4425FC173AB7D7620B15541F00F0D746D435FC1A430486915B155413C5049A01D445FC1FA04470B0AB15541C148762B42445FC1830495200BB15541FA23BCA0F3445FC1DE47D8D128B15541033D37DF81455FC174E90DA94FB15541832C6A0B0E465FC16007E35493B15541FA8B2CE50E475FC199CF250D0BB255417921C1F517475FC12026BC1C0FB25541EB2319D365475FC1C117AD8231B25541172ADFFF99475FC18A3A1CA848B255412B241E139E475FC13A22FA0F4AB25541EC28B5C442485FC1173D16E687B255417FE40D5ACC485FC1617A9803ADB255413D8905443B495FC1CD2F5AC6C9B2554164746E8DD7495FC1CD66ABB1E2B255419AEF112D584A5FC1B00538D3EFB25541CEFBAB33894A5FC12F56C1B1F5B255411E1822573A4B5FC144E51D21F5B25541953A7F41E94B5FC138F5B43EEAB2554165B1AC46754D5FC1C74363DFBAB2554112907917294F5FC1051D2E7E9AB25541699C11A97D4F5FC1B0334C2A94B25541A43E3E083C505FC1BE6FEC6179B25541FA3711293C535FC1C2604E46F4B15541EE047DE7A7535FC1F60B8F5DDEB15541541E37092F545FC192CB717DBBB15541D20D6A35BB545FC1AB4056C689B15541F2F5069E27555FC1F1BC9D4C55B155415BE01BE58C555FC19C4793BD17B155411BFA263EEF555FC1D6356953D6B0554132A6EDF51F565FC132259FD2AEB0554154B4D24B33565FC11D37081D9FB055414EA76B7972565FC10DA52E4169B05541039B7019C1565FC14BE69A6317B05541415F75E402575FC153B97CC1C9AF554147F19AC967575FC19DACEF7F3EAF5541622DD8AF9F585FC138AB54A17CAF554107D597D324595FC179F9D38698AF5541D58FBAB2CB5A5FC1C9E6B459BDAF5541F0541D03DA5C5FC181B1DBFFFEAF55416CD863B1465E5FC12176CEB046B055415B58E036FF5E5FC159D36E2183B0554121AF23ADFD5F5FC1D273D64BF1B05541EFCA7AEE60605FC16ABA2C0D0FB15541E90408C596605FC1B7630DFD0FB1554157AE23F3C1605FC1537F6DF40CB155415E75E3260F615FC164A9AE81F8B05541890E5E77BE615FC1A05C8768B6B055416E128B2B30625FC19B6B381D5DB0554170D2F99A4C625FC15E5463424FB05541177DBEA9A3625FC1F7F53D5B23B0554126583F9ED3625FC117732A9E0BB05541E4F9256584635FC15590C00AE8AF55419CF8E52E31645FC1F6F8B092ACAF55419806EE5370655FC143943AB291AF554189660E3657665FC12D4CBD3D8BAF5541D1F05B66A8665FC1A4112E858BAF55417CAC0C2BC1665FC1E165FEE094AF55417C1B10A81A675FC17762BD42B5AF5541373DFE11BF675FC11A76255EEFAF5541CE8C4FEBCF675FC17FABB055F6AF5541E9E932B1DB675FC116DFB944FCAF55413CC45679E3675FC13D8DE01000B05541C9865A7709685FC1A63F79D017B05541F577BE5062685FC1E43FBE326AB05541F997D8BFA0685FC1844B4BA8B5B05541C67B7B656C695FC106C6F76A61B15541E1DA0786656A5FC1DFB13B7924B25541F0DD974EF86A5FC1A16CAB14C1B255418199F3F17C6B5FC13BC6812DEBB35541903401E2976B5FC17F9FF51DFDB4554129E08A2BAC6B5FC1D02842468CB55541922D7405CA6B5FC1364BC7A6F3B555419CBE1C00FB6B5FC16F0306667DB65541E18C7D96356C5FC1ECAB39B6EEB65541BFD4D2126E6C5FC126C3F03633B7554101000000020000000001000000FFFFFFFF0000000003")
	geoudt_array = append(geoudt_array, sample_geo)

	//V2 geometry CURVEPOLYGON(COMPOUNDCURVE((0 0, 0 2, 2 2), CIRCULARSTRING (2 2, 1 0, 0 0)))
	sample_geo, _ = hex.DecodeString("00000000020405000000000000000000000000000000000000000000000000000000000000000000004000000000000000400000000000000040000000000000F03F00000000000000000000000000000000000000000000000001000000030000000001000000FFFFFFFF000000000A03000000020003")
	geoudt_array = append(geoudt_array, sample_geo)

	//multipolygone MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((20 35, 45 20, 30 5, 10 10, 10 30, 20 35), (30 20, 20 25, 20 15, 30 20))) 4326
	sample_geo, _ = hex.DecodeString
	geoudt_array = append(geoudt_array, sample_geo)

	//POINT (20 40)', 4326
	sample_geo, _ = hex.DecodeString("E6100000010C00000000000044400000000000003440")
	geoudt_array = append(geoudt_array, sample_geo)

	for _, geobin := range geoudt_array {

		g, err := mssqlclrgeo.ReadGeometry(geobin)
		if err != nil {
			fmt.Println(err)
		}
		showInfo(g)
	}

}
func showInfo(g mssqlclrgeo.Geometry) {
	fmt.Printf("SRID: %d\n", g.SRID)
	fmt.Printf("Version %d\n", g.Version)

	fmt.Printf("Properties: H:%t L:%t P:%t V:%t M:%t Z:%t \n", g.Properties.H, g.Properties.L, g.Properties.P, g.Properties.V, g.Properties.M, g.Properties.Z)
	fmt.Printf("Points count:  %d\n", len(g.Points))
	fmt.Printf("Figure count:  %d\n", len(g.Figures))
	for i, figure := range g.Figures {
		fmt.Printf("figure #%d type: %d\n", i, figure.Attribute)
	}
	fmt.Printf("Shape count:  %d\n", len(g.Shapes))
	for i, shape := range g.Shapes {
		fmt.Printf("shape #%d type: %d\n", i, shape.OpenGisType)
	}
	fmt.Printf("Segment count:  %d\n", len(g.Segments))

	fmt.Println("---")
}
func wkb2GeoUdt() {

	fmt.Print("ParseWkb")

	//wkbbin, _ := hex.DecodeString("0103000000010000002500000033FD674119435FC1D8C1F3AE27BD5541A961FC4818435FC1DDD5298237BD55414186240117435FC1D839355E4CBD5541FCB7CFA2C8425FC1602D1DDBC1BD554110790D10B2425FC1101083B3E3BD5541C755F29F5A425FC15D2C2B41B1BD55416B51589D1B425FC1A804C2840CBE5541C3238700FF415FC179EFAB01FCBD55411009BD88D5415FC187773E363CBE554104B1216CAB415FC1E34C11B32BBE55414B1E5A1890415FC119326EA826BE55414A937CCD6A415FC1768EF93431BE55413A55368C69415FC1B73AB5391EBE554104D012792B415FC17CF875C514BE55417D1BD29D30415FC145EA8C16FBBD5541CACA1187B4405FC1A94CAE80AEBD5541F7010BAB9E405FC1E7A92D91D4BD55411B6941522C3F5FC11F22858E29BD554132BCC84C3F3F5FC129ABC6F91EBD5541BDC165D4153F5FC15289C8A8F0BC55414BE3B265FD3E5FC12D409083C0BC554147721BB0193F5FC1311E9D6AA0BC55413AD4ED56593F5FC16468115A64BC55413247A697643F5FC1758514CE59BC5541736382976D3F5FC1276A07574EBC55414A48397D943F5FC1E2D8DE9114BC5541DC34DA6BB13F5FC1B9C953E926BC55411FA7E71315405FC1DBA9B996CCBB55415B2255B7EE405FC1874A9471FCBA5541AF2BF4955D415FC141D2947D41BB55411CC725EB9D415FC13A169D8E69BB554100D5E774AA415FC1295A0DE25ABB5541FDD3A046A3425FC117F02E0FF9BB5541CAB5A3BB72425FC1497D3B8041BC55416E7DA712F1425FC1EBF8026995BC554155712307BC425FC1E966D63CEABC554133FD674119435FC1D8C1F3AE27BD5541")

	//POLYGON((-122.358 47.653 , -122.348 47.649, -122.348 47.658, -122.358 47.658, -122.358 47.653)) 4326
	//sql server
	//wkb, _ := hex.DecodeString("01030000000100000005000000F4FDD478E9965EC0DD24068195D3474083C0CAA145965EC0508D976E12D3474083C0CAA145965EC04E62105839D44740F4FDD478E9965EC04E62105839D44740F4FDD478E9965EC0DD24068195D34740")
	//postgis
	wkb, _ := hex.DecodeString("0103000020E61000000100000005000000F4FDD478E9965EC0DD24068195D3474083C0CAA145965EC0508D976E12D3474083C0CAA145965EC04E62105839D44740F4FDD478E9965EC04E62105839D44740F4FDD478E9965EC0DD24068195D34740")

	//multi
	//wkb, _ := hex.DecodeString
	//ewkb
	//wkb, _ := hex.DecodeString

	////POINT (20 40)', 4326
	//wkb, _ := hex.DecodeString("0101000020E610000000000000000034400000000000004440")

	geom, err := mssqlclrgeo.ParseWkb(wkb)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("*** WkbToUdtGeo ***")
	udtbin, err := mssqlclrgeo.WkbToUdtGeo(geom)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("*** ReadGeometry ***")
	g, err := mssqlclrgeo.ReadGeometry(udtbin)
	if err != nil {
		fmt.Println(err)
	}
	showInfo(g)

	fmt.Println(hex.EncodeToString(udtbin))

}
